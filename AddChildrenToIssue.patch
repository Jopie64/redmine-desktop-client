Index: Issue.cs
===================================================================
--- Issue.cs	(revision 114)
+++ Issue.cs	(working copy)
@@ -212,6 +212,17 @@
         public IList<IssueRelation> Relations { get; set; }
 
         /// <summary>
+        /// Gets or sets the issue children.
+        /// </summary>
+        /// <value>
+        /// The issue children.
+        /// NOTE: Only Id, tracker and subject are filled.
+        /// </value>
+        [XmlArray("children")]
+        [XmlArrayItem("issue")]
+        public IList<IssueChild> Children { get; set; }
+
+        /// <summary>
         /// Gets or sets the attachments.
         /// </summary>
         /// <value>
@@ -285,6 +296,8 @@
 
                     case "changesets": Changesets = reader.ReadElementContentAsCollection<ChangeSet>(); break;
 
+                    case "children": Children = reader.ReadElementContentAsCollection<IssueChild>(); break;
+
                     default: reader.Read(); break;
                 }
             }
Index: IssueChild.cs
===================================================================
--- IssueChild.cs	(revision 0)
+++ IssueChild.cs	(working copy)
@@ -0,0 +1,67 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Globalization;
+using System.Xml;
+using System.Xml.Schema;
+using System.Xml.Serialization;
+
+namespace Redmine.Net.Api.Types
+{
+    [XmlRoot("issue")]
+    public class IssueChild : Identifiable<IssueChild>, IXmlSerializable, IEquatable<Issue>, ICloneable
+    {
+        /// <summary>
+        /// Gets or sets the tracker.
+        /// </summary>
+        /// <value>The tracker.</value>
+        [XmlElement("tracker")]
+        public IdentifiableName Tracker { get; set; }
+
+        /// <summary>
+        /// Gets or sets the subject.
+        /// </summary>
+        /// <value>The subject.</value>
+        [XmlElement("subject")]
+        public String Subject { get; set; }
+
+        public XmlSchema GetSchema() { return null; }
+
+        public void ReadXml(XmlReader reader)
+        {
+            Id = Convert.ToInt32(reader.GetAttribute("id"));
+            reader.Read();
+
+            while (!reader.EOF)
+            {
+                if (reader.IsEmptyElement && !reader.HasAttributes)
+                {
+                    reader.Read();
+                    continue;
+                }
+
+                switch (reader.Name)
+                {
+                    case "tracker": Tracker = new IdentifiableName(reader); break;
+
+                    case "subject": Subject = reader.ReadElementContentAsString(); break;
+
+                    default: reader.Read(); break;
+                }
+            }
+        }
+
+        public void WriteXml(XmlWriter writer) { }
+
+        public object Clone()
+        {
+            var issueChild = new IssueChild { Id = Id, Subject = Subject, Tracker = Tracker };
+            return issueChild;
+        }
+
+        public bool Equals(Issue other)
+        {
+            if (other == null) return false;
+            return (Id == other.Id && Tracker == other.Tracker && Subject == other.Subject);
+        }
+    }
+}
